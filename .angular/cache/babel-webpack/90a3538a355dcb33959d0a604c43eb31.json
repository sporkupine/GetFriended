{"ast":null,"code":"import { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { AuthUser } from './auth-user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.isLoggedIn = false;\n      this.user = new BehaviorSubject(null);\n    }\n\n    onSignup(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + environment.firebaseAPIKey, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(responseData => {\n        this.handleAuth(responseData.email, responseData.localId, responseData.idToken, +responseData.expiresIn);\n      }));\n    }\n\n    onSignin(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + environment.firebaseAPIKey, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(responseData => {\n        this.handleAuth(responseData.email, responseData.localId, responseData.idToken, +responseData.expiresIn);\n      }));\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new AuthUser(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        const expirationTime = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationTime);\n      }\n    }\n\n    onLogout() {\n      this.user.next(null);\n      this.router.navigate(['/auth']);\n      localStorage.removeItem('userData');\n\n      if (this.tokenExpirationTImer) {\n        clearTimeout(this.tokenExpirationTImer);\n      }\n\n      this.tokenExpirationTImer = null;\n    }\n\n    autoLogout(expirationTime) {\n      this.tokenExpirationTImer = setTimeout(() => {\n        this.onLogout();\n      }, expirationTime);\n    }\n\n    handleAuth(email, localId, token, expiresIn) {\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new AuthUser(email, localId, token, expirationDate);\n      this.user.next(user);\n      this.autoLogout(expiresIn * 1000);\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    handleError(errorResponse) {\n      let errorMessage = 'An unkown error occurred.';\n\n      if (!errorResponse.error || !errorResponse.error.error) {\n        return throwError(errorMessage);\n      }\n\n      switch (errorResponse.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'There is already an account associated with this email address. Did you mean to sign in?';\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'There is no account associated with this email address. Did you mean to sign up?';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'The password you entered was incorrect for this account. Please contact an administrator if you have forgotten your password.';\n          break;\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}